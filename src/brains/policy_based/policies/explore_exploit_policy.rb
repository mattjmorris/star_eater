require File.dirname(__FILE__) + "/../actions/move_towards_specified_star"
require File.dirname(__FILE__) + "/../../../../src/util/extend_array"

class ExploreExploitPolicy

  attr_accessor :estimated_star_values, :exploration_threshold, :current_strategy

  def initialize
    @move_towards_specified_star = MoveTowardsSpecifiedStar.new
    @estimated_star_values = {}
    @star_eat_count = {}
    @exploration_threshold = 0.3 #TODO - start this number high and decrease with time or confidence.
    @current_strategy = :exploit
  end

  def calc_velocity(environment_data)
    #velocity = @current_strategy == :exploration ? exploration_action(environment_data) : exploitation_action(environment_data)
    return @move_towards_specified_star.calc_velocity(@id_of_selected_star_to_eat, environment_data)
  end

  def deliver_reward(environment_data)
    reward = environment_data[:reward]
    star_id = environment_data[:star_id_delivering_reward]
    # new estimate of star value = old estimate + step size * (reward value - old estimate)
    @star_eat_count[star_id] ||= 0
    @estimated_star_values[star_id] ||= 0
    @star_eat_count[star_id] += 1
    @estimated_star_values[star_id] = @estimated_star_values[star_id] + (1.0/@star_eat_count[star_id]) * (reward - @estimated_star_values[star_id])
    @id_of_star_to_get = update_strategy(environment_data)
  end
  
  private

  def update_strategy(environment_data)
    # first, decide which strategy to use
    @current_strategy = rand <= @exploration_threshold ? :exploration : :exploitation
    # then, get id of new star to pursue until a reward is achieved
    @id_of_selected_star_to_eat = @current_strategy == :exploration ? exploration_star_id(environment_data) : exploitation_star_id
  end

  # TODO - take distance into account so that maximize estimated achieved value over time

  def exploitation_star_id
    # assuming there will at least be a star id 0, so default to it
    highest_value_star_id = 0
    highest_value_star_id = @estimated_star_values.sort{|a,b| a[1]<=>b[1]}.last[0] if @estimated_star_values.size > 0
    return highest_value_star_id
  end

  # TODO: right now randomly selecting a star to move towards.  Should use a better exploration strategy based on amount
  # of data and closeness of stars.
  def exploration_star_id(environment_data)
    # ids of all stars - id of highest valued star
    star_ids = environment_data[:star_position_hash].keys - [exploitation_star_id]
    selected_id = star_ids.random_element
    return @move_towards_specified_star.calc_velocity(selected_id, environment_data)
  end

end