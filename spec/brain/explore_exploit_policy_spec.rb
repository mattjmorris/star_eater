require "spec"
require File.dirname(__FILE__) + "/../../src/brains/policy_based/policies/simple_action_selection"

describe SimpleActionSelection do

  before(:each) do
    @policy= SimpleActionSelection.new
    $GAME_INFO = {}
    $GAME_INFO[:action_info] = ""
    @environment_data = {}
    @environment_data[:star_position_hash] = {1 => Position.new(60,0), 2 => Position.new(0,20)}
    @environment_data[:ship_position] = Position.new(0,0)
    @environment_data[:ship_max_speed] = 20
  end

  it "should track average reward amount for each star" do
    @environment_data[:reward] = 10
    @environment_data[:star_id_delivering_reward] = 1
    @policy.deliver_reward(@environment_data)
    @policy.estimated_star_values[1].should == 10

    @environment_data[:reward] = 4
    @environment_data[:star_id_delivering_reward] = 1
    @policy.deliver_reward(@environment_data)
    @policy.estimated_star_values[1].should == 7
  end

  it "when not incorporating distance, should exploit by moving towards highest valued star" do

    @environment_data[:reward] = 10
    @environment_data[:star_id_delivering_reward] = 1
    @policy.deliver_reward(@environment_data)

    @environment_data[:reward] = 5
    @environment_data[:star_id_delivering_reward] = 2
    @policy.deliver_reward(@environment_data)

    @policy.current_strategy = :exploitation
    @policy.incorporate_distance = false
    @policy.update_target(@environment_data)
    velocity = @policy.calc_velocity(@environment_data)
    velocity.x.should == 60
    velocity.y.should == 0

  end

 it "when incorporating distance, should exploit by moving towards star with highest value/distance (with distance calculated in time_steps)" do

    @environment_data[:reward] = 10
    @environment_data[:star_id_delivering_reward] = 1
    @policy.deliver_reward(@environment_data)

    @environment_data[:reward] = 5
    @environment_data[:star_id_delivering_reward] = 2
    @policy.deliver_reward(@environment_data)

    @policy.current_strategy = :exploitation
    @policy.incorporate_distance = true
    @policy.update_target(@environment_data)  
    velocity = @policy.calc_velocity(@environment_data)
    velocity.x.should == 0
    velocity.y.should == 20

 end

  #it "should explore by moving towards a star that is not the highest valued star" do
  #  @policy.deliver_reward(1, 5)
  #  @policy.deliver_reward(2, 10)
  #  environment_data = {:star_position_hash => {1 => Position.new(10,0), 2 => Position.new(0,10)}, :ship_position => Position.new(0,0)}
  #  @policy.current_strategy = :exploration
  #  velocity = @policy.calc_velocity(environment_data)
  #  velocity.x.should == 10
  #  velocity.y.should == 0
  #end
  #
  #it "should adjust explore/exploit strategy after receiving each reward, based on the exploration threshold" do
  #  @policy.exploration_threshold = 1 # this will ensure that the strategy switces to exploration as soon as given a chance.
  #  @policy.current_strategy = :exploitation
  #  @policy.deliver_reward(1,10)
  #  @policy.current_strategy.should == :exploration
  #  @policy.exploration_threshold = 0
  #  @policy.deliver_reward(1,10)
  #  @policy.current_strategy.should == :exploitation
  #end

end